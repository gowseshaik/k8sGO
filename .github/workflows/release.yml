name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v0.1.0'

env:
  GO_VERSION: '1.21'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin, freebsd]
        goarch: [amd64, arm64]
        include:
          - goos: linux
            goarch: 386
          - goos: windows
            goarch: 386
        exclude:
          - goos: freebsd
            goarch: arm64

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Get dependencies
      run: |
        go mod download
        go mod verify

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        if [ "$VERSION" = "$GITHUB_REF" ]; then
          VERSION=${{ github.event.inputs.version || 'v0.1.0' }}
        fi
        BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S')
        GIT_COMMIT=$(git rev-parse --short HEAD)
        
        BINARY_NAME=k8sgo-${{ matrix.goos }}-${{ matrix.goarch }}
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        go build \
          -ldflags "-X main.Version=${VERSION} -X main.BuildTime=${BUILD_TIME} -X main.GitCommit=${GIT_COMMIT} -w -s" \
          -o "${BINARY_NAME}" \
          k8sgo.go
        
        # Create archive
        if [ "${{ matrix.goos }}" = "windows" ]; then
          zip "${BINARY_NAME%.exe}.zip" "${BINARY_NAME}"
        else
          tar -czf "${BINARY_NAME}.tar.gz" "${BINARY_NAME}"
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: k8sgo-${{ matrix.goos }}-${{ matrix.goarch }}
        path: k8sgo-*

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create release directory
      run: |
        mkdir -p release
        find . -name "k8sgo-*" -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec mv {} release/ \;

    - name: Generate checksums
      run: |
        cd release
        sha256sum * > checksums.txt

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name || github.event.inputs.version }}
        release_name: k8sGo ${{ github.ref_name || github.event.inputs.version }}
        body: |
          ## 🚀 k8sGo Release ${{ github.ref_name || github.event.inputs.version }}
          
          A modern Terminal User Interface (TUI) for monitoring Kubernetes and OpenShift clusters.
          
          ### ✨ Features
          - 🎨 Beautiful ASCII Banner with Unicode characters
          - 🔄 Context Switching between multiple Kubernetes contexts
          - 📊 Multi-Frame Layout (Resources | Logs | Events)
          - 🌐 Support for both Kubernetes and OpenShift clusters
          - ⚡ Real-time Updates and live monitoring
          - 🎯 Resource Scoping (Cluster-wide and namespace-scoped)
          - 📋 Event Tracking for selected resources
          - 🎨 Professional dark color scheme
          
          ### 📦 Downloads
          
          Choose the binary for your platform:
          
          #### Linux
          - **Intel/AMD 64-bit**: `k8sgo-linux-amd64.tar.gz`
          - **ARM 64-bit**: `k8sgo-linux-arm64.tar.gz`
          - **32-bit**: `k8sgo-linux-386.tar.gz`
          
          #### Windows
          - **Intel/AMD 64-bit**: `k8sgo-windows-amd64.zip`
          - **ARM 64-bit**: `k8sgo-windows-arm64.zip`
          - **32-bit**: `k8sgo-windows-386.zip`
          
          #### macOS
          - **Intel Macs**: `k8sgo-darwin-amd64.tar.gz`
          - **Apple Silicon (M1/M2/M3)**: `k8sgo-darwin-arm64.tar.gz`
          
          #### FreeBSD
          - **Intel/AMD 64-bit**: `k8sgo-freebsd-amd64.tar.gz`
          
          ### 🚀 Quick Start
          
          1. Download the appropriate binary for your platform
          2. Extract the archive
          3. Make executable (Linux/macOS): `chmod +x k8sgo-*`
          4. Run: `./k8sgo-*` or `k8sgo-*.exe`
          
          ### 📋 Prerequisites
          
          - Access to a Kubernetes or OpenShift cluster
          - `kubectl` configured with cluster access
          
          ### 🔐 Verification
          
          Verify your download using SHA256 checksums provided in `checksums.txt`.
          
          For detailed installation and usage instructions, see the [README](https://github.com/${{ github.repository }}/blob/main/README.md).
        draft: false
        prerelease: false

    - name: Upload Release Assets
      run: |
        cd release
        for file in *; do
          echo "Uploading $file..."
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Content-Type: application/octet-stream" \
               --data-binary @"$file" \
               "${{ steps.create_release.outputs.upload_url }}?name=$file"
        done